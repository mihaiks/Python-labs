Лабораторна робота №10: Introduction to Python Programming.

=======================
Мета роботи

Освоєння базових концепцій та функціональних можливостей мови програмування Python, зокрема:

    Розуміння синтаксису та основних структур даних мови.
    Навички роботи з функціями та класами.
    Вміння працювати з файлами, здійснювати операції зчитування та запису даних.
    Основи обробки виключень та використання модулів.

=======================
Опис завдання

Створити програму, яка буде включати наступні функціональні елементи:

    Генерація послідовності чисел Фібоначчі.
    Різні методи сортування списків.
    Реалізація базових операцій з файлами: зчитування та запис даних.
    Використання об'єктно-орієнтованого підходу для моделювання об'єктів та взаємодії з ними.
    Обробка виключень для забезпечення безпеки виконання програми.

=========================
Виконання роботи:

Структура проекту: 
Кожна лабораторна робота завантажена у відповідну папку на GitHub. Назва папки відповідає номеру лабораторної роботи (наприклад, labX).

Опис кожного файлу та його призначення:
main.py: Основний код програми з реалізацією усіх функцій.
README.md: Файл з детальним поясненням проекту та виконані завдання.


Опис основних функцій та методів:
Генерація чисел Фібоначчі

Функція generate_fibonacci(n) з модулю fibonacci.py генерує перші n чисел Фібоначчі.


def generate_fibonacci(n):
    fib_sequence = [0, 1]
    for i in range(2, n):
        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
    return fib_sequence[:n]

Пояснення роботи:

    Функція створює список fib_sequence, який починається з чисел 0 і 1 (перші два числа Фібоначчі).
    Використовується цикл for, щоб додати до списку наступні числа Фібоначчі, шляхом додавання двох останніх чисел.
    Повертається список перших n чисел Фібоначчі.

Звичайно! Ось короткі приклади використання кожної з функцій з попереднього опису:

Приклади використання:

#### 1. Генерація чисел Фібоначчі


from fibonacci import generate_fibonacci

# Генеруємо перші 10 чисел Фібоначчі
fib_sequence = generate_fibonacci(10)
print(fib_sequence)
# Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
```

#### 2. Сортування списків: Quick Sort


from sorting import quick_sort

# Вхідний несортований список
unsorted_list = [5, 2, 9, 1, 5]

# Сортуємо список за допомогою Quick Sort
sorted_list = quick_sort(unsorted_list)
print(sorted_list)
# Output: [1, 2, 5, 5, 9]
```

#### 3. Обробка виключень: Safe Divide


from exceptions import safe_divide

# Ділимо 10 на 2 безпечно
result = safe_divide(10, 2)
print(result)
# Output: 5.0

# Спроба поділити 5 на 0
result = safe_divide(5, 0)
print(result)
# Output: Error: division by zero
```

Ці приклади ілюструють роботу кожної функції з вашого попереднього опису, показуючи їхні основні здібності та застосування.

===========================
Результати

Усі функції були успішно перевірені з різними вхідними даними і повертали очікувані результати.

============================
Висновки

Робота над лабораторною роботою дозволила досягти поставленої мети, освоїти базові концепції мови програмування Python та вирішити виниклі завдання. Виникли проблеми з обробкою виключень, які були успішно вирішені завдяки впровадженню відповідних обробників.

===========================
Інструкції з запуску
