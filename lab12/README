Лабораторна робота №12: ООП в Python. Матриці.

==========================
Мета роботи

Ознайомлення з об'єктно-орієнтованим програмуванням (ООП) в мові Python через створення класу Matrix, який дозволяє працювати з матрицями, включаючи операції додавання елементів, транспонування, множення матриць, перевірку на симетрію, обертання, вилучення діагоналі та інші.

==========================
Опис завдання

Створення класу Matrix, що включає різноманітні методи для операцій з матрицями:

    Додавання елементів до матриці.
    Обчислення суми рядків матриці.
    Транспонування матриці.
    Множення матриць.
    Перевірка на симетрію.
    Обертання матриці вправо.
    Вилучення діагоналі матриці.
    Плоске представлення матриці.
    Статичний метод для створення матриці зі списку списків.
    Інші відповідні методи.

===========================
Виконання роботи

  Структура проекту:

Проект має наступну структуру:

    main.py: Основний файл програми, де викликаються методи класу Matrix для демонстрації їх роботи.
    matrix.py: Файл, який містить клас Matrix, що реалізує основні операції з матрицями.


Опис основних функцій та методів класу Matrix:

    __init__(self, rows, columns, data=None)
        Ініціалізує об'єкт матриці з заданим розміром (rows, columns) і опціональними даними (data).

    add_element(self, row, column, value)
        Додає задане значення value до позиції (row, column) у матриці.

    sum_of_rows(self)
        Обчислює суму кожного рядка матриці і повертає список сум.

    transpose(self)
        Транспонує поточну матрицю (заміняє рядки на стовпці).

    multiply_by(self, other)
        Множить поточну матрицю на іншу матрицю other і повертає нову матрицю-результат.

    is_symmetric(self)
        Перевіряє, чи є поточна матриця симетричною (рівна своєму транспонованому варіанту).

    rotate_right(self)
        Обертає матрицю на 90 градусів в правому напрямку.

    flatten(self)
        Повертає плоске представлення матриці у вигляді одномірного списку.

    from_list(list_of_lists)
        Статичний метод для створення об'єкту матриці зі списку списків.

    diagonal(self)
        Повертає список діагональних елементів матриці.

Приклади використання:
# main.py

# Створення матриці і додавання елементів
matrix = Matrix(2, 3)
matrix.add_element(0, 1, 1)
matrix.add_element(1, 2, 2)

# Транспонування матриці
transposed = matrix.transpose()

# Множення матриць
matrix1 = Matrix(2, 3)
matrix2 = Matrix(3, 2)
result = matrix1.multiply_by(matrix2)

# Перевірка на симетрію
is_symmetric = matrix.is_symmetric()

# Обертання матриці
matrix.rotate_right()

# Отримання плоского представлення
flattened = matrix.flatten()

# Створення матриці зі списку списків
list_of_lists = [[1, 2], [3, 4]]
matrix_from_list = Matrix.from_list(list_of_lists)

# Отримання діагоналі матриці
diagonal_elements = matrix.diagonal()

=============================
Результати

Програма була протестована на різних вхідних даних, всі методи показали очікувані результати. Нижче наведені приклади використання деяких методів:



# Приклади використання класу Matrix
matrix = Matrix(2, 3)
print(matrix.data)  # [[0, 0, 0], [0, 0, 0]]

matrix.add_element(1, 2, 10)
print(matrix.data)  # [[0, 0, 10], [0, 0, 0]]

matrix.add_element(0, 0, 5)
matrix.add_element(0, 1, 10)
matrix.add_element(1, 2, 20)
print(matrix.sum_of_rows())  # [15, 20, 0]

matrix = Matrix(2, 3)
matrix.add_element(0, 1, 1)
matrix.add_element(1, 2, 2)
transposed = matrix.transpose()
print(transposed.data)  # [[0, 0], [1, 2], [0, 0]]

matrix1 = Matrix(2, 3)
matrix1.add_element(0, 0, 1)
matrix1.add_element(0, 1, 2)
matrix1.add_element(0, 2, 3)

matrix2 = Matrix(3, 2)
matrix2.add_element(0, 0, 1)
matrix2.add_element(1, 0, 2)
matrix2.add_element(2, 0, 3)

result = matrix1.multiply_by(matrix2)
print(result.data)  # [[14, 0], [0, 0]]

matrix = Matrix(2, 2)
matrix.add_element(0, 1, 5)
matrix.add_element(1, 0, 5)
print(matrix.is_symmetric())  # True

matrix = Matrix(2, 2)
matrix.add_element(0, 0, 1)
matrix.add_element(0, 1, 2)
matrix.add_element(1, 0, 3)
matrix.add_element(1, 1, 4)
matrix.rotate_right()
print(matrix.data)  # [[3, 1], [4, 2]]

matrix = Matrix(2, 2)
matrix.add_element(0, 0, 1)
matrix.add_element(0, 1, 2)
matrix.add_element(1, 0, 3)
matrix.add_element(1, 1, 4)
print(matrix.flatten())  # [1, 2, 3, 4]

list_of_lists = [[1, 2], [3, 4]]
matrix = Matrix.from_list(list_of_lists)
print(matrix.data)  # [[1, 2], [3, 4]]

matrix = Matrix(3, 3)
matrix.add_element(0, 0, 1)
matrix.add_element(1, 1, 2)
matrix.add_element(2, 2, 3)
print(matrix.diagonal())  # [1, 2, 3]

==================================
Висновки

Лабораторна робота дозволила глибше зрозуміти концепції ООП в Python через реалізацію класу для роботи з матрицями. Всі заплановані завдання були виконані успішно, програма працює стабільно і коректно в різних сценаріях використання.

==================================
Інструкції з запуску
