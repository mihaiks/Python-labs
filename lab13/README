Лабораторна робота №13: Функції для обробки даних.

======================
Мета роботи:
Метою цієї лабораторної роботи є реалізація набору функцій для обробки даних, які охоплюють різні аспекти роботи зі списками, матрицями, рядками, регулярними виразами тощо. Очікується, що студенти зможуть реалізувати функції, перевірити їх коректність і вивести результати.

======================
Опис завдання:
Створити набір функцій для обробки різних типів даних у Python, включаючи:
- **interpolate_missing(numb)**: функція для інтерполяції пропущених значень у списку чисел.
- **fibonacci(n)**: генератор для послідовності чисел Фібоначчі довжиною `n`.
- **process_batches(lst, batch_size)**: функція для обробки списку `lst` у пакетах розміром `batch_size`, повертає максимальне значення у кожному пакеті.
- **encode_string(s)** та **decode_string(s)**: функції для кодування та декодування рядків.
- **rotate_matrix(matrix)**: функція для повороту матриці на 90 градусів проти годинникової стрілки.
- **regex_search(strings, pattern)**: функція для пошуку рядків у списку `strings`, які відповідають паттерну `pattern`.
- **merge_sorted_arrays(arr1, arr2)**: функція для злиття двох відсортованих масивів `arr1` і `arr2` в один відсортований масив.
- **is_prime(num)**: функція для перевірки, чи є число `num` простим числом.
- **group_by_key(data, key)**: функція для групування даних за ключем `key` у словнику, де значеннями є списки значень зі вхідного списку `data`.
- **remove_outliers(lst)**: функція для видалення викидів у списку `lst`, засноване на середньому значенні та стандартному відхилень.

========================
Виконання роботи

Структура проекту:
Проект має наступну структуру:
main.py: Основний файл програми, де виконуються імпорти функцій з generators.py та utils.py, а також демонстрації їх використання.
README.md: Файл, що містить детальне пояснення проекту, опис завдання, кроки виконання, приклади використання та іншу необхідну інформацію.

----------------------------------
Опис основних функцій та методів з поясненням їх роботи:

    fibonacci_generator:
        Опис: Генерує послідовність чисел Фібоначчі.
        Приклад використання:



    fib_gen = fibonacci_generator()
    fib_sequence = [next(fib_gen) for _ in range(10)]
    print(fib_sequence)  # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]

rotate_matrix_generator:

    Опис: Генерує обернену матрицю.

-----------------------------------

    Приклад використання:



    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    rotated_matrix = list(rotate_matrix_generator(matrix))
    print(rotated_matrix)  # [[3, 6, 9], [2, 5, 8], [1, 4, 7]]

regex_search:

    Опис: Пошук стрічок за допомогою регулярного виразу.
    Приклад використання:


strings = ["apple", "banana", "cherry", "pineapple"]
pattern = r"apple"
matched_strings = regex_search(strings, pattern)
print(matched_strings)  # ['apple', 'pineapple']

Приклади використання
Приклади використання генераторів



# Використання генератора чисел Фібоначчі
fib_gen = fibonacci_generator()
fib_sequence = [next(fib_gen) for _ in range(10)]
print(fib_sequence)  # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]

# Використання генератора для обертання матриці
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
rotated_matrix = list(rotate_matrix_generator(matrix))
print(rotated_matrix)  # [[3, 6, 9], [2, 5, 8], [1, 4, 7]]

# Використання генератора для пошуку стрічок за регулярним виразом
strings = ["apple", "banana", "cherry", "pineapple"]
pattern = r"apple"
matched_strings = regex_search(strings, pattern)
print(matched_strings)  # ['apple', 'pineapple']

Це описує структуру проекту, основні файли, функції та їх використання, що дозволяє легко орієнтуватись у проекті та швидко знаходити потрібний функціонал.


=============================
Результати
Всі функції були успішно реалізовані та пройшли тестування з заданими тестовими даними. Результати відповідають очікуванням щодо правильності обробки даних та ефективності роботи програм.

=============================
Висновки
Ця лабораторна робота дозволила покращити розуміння функцій Python для обробки даних, роботи з матрицями та рядками, а також роботи з регулярними виразами. Проблеми, які виникали під час розробки, були вирішені завдяки систематичному підходу до написання коду та тестування.

============================
Інструкції з запуску
