Лабораторна робота №17: Generators and Data structures.

==========================
Мета роботи

Метою лабораторної роботи є дослідження та практичне використання генераторів в мові програмування Python. Очікується, що студенти зможуть ознайомитися з особливостями генераторів, їхніми перевагами у порівнянні з іншими підходами та здійснити практичні застосування для генерації різноманітних послідовностей.


===========================
Опис завдання

Необхідно реалізувати набір генераторів для створення різних типів послідовностей:

    Числові послідовності:
        Генератор чисел (number_generator)
        Генератор парних чисел у заданому діапазоні (even_number_generator)
        Генератор непарних чисел у заданому діапазоні (odd_number_generator)
        Генератор чисел Фібоначчі (fibonacci_generator)
        Генератор простих чисел (prime_number_generator)

    Обхід дерев та графів:
        Генератори для обходу дерева у префіксному, інфіксному та постфіксному порядках (pre_order_traversal, in_order_traversal, post_order_traversal)
        Генератори для обходу графа в глибину та в ширину (dfs_traversal, bfs_traversal)

    Робота зі словниками та файлами:
        Генератори для ключів, значень та елементів словника (dict_keys_generator, dict_values_generator, dict_items_generator)
        Генератори для рядків та слів у файлі (file_lines_generator, file_words_generator)

    Інші корисні генератори:
        Генератор для символів у рядку (string_chars_generator)
        Генератор унікальних елементів у списку (unique_elements_generator)
        Генератор для зворотного списку (reverse_list_generator)
        Генератор декартового добутку та комбінацій (cartesian_product_generator, permutations_generator, combinations_generator)

===========================
Виконання роботи

Структура проекту:

Проект організовано у вигляді окремих функцій-генераторів, розміщених у файлі main.py.
Опис файлів:

    main.py: Містить визначення всіх генераторів.
    README.md: Файл, який ви читаєте зараз, з описом лабораторної роботи та поясненнями до кожного генератора.

Опис основних функцій та методів:

Кожен генератор має свою функціональну мету та призначення. Вони реалізовані таким чином, щоб генерувати значення "на льоту" (ліниво), що дозволяє ефективно обробляти великі обсяги даних без необхідності зберігати всю послідовність у пам'яті.

Приклади використання:



# Приклади використання генераторів з модуля generators.py

# Генератор чисел Фібоначчі
fibonacci_gen = fibonacci_generator()
print(list(next(fibonacci_gen) for _ in range(10)))

# Генератор простих чисел
prime_gen = prime_number_generator(20)
print(list(prime_gen))

# Генератори для обходу дерева
tree_root = TreeNode(1)
tree_root.left = TreeNode(2)
tree_root.right = TreeNode(3)
print(list(pre_order_traversal(tree_root)))

# Генератор для рядків у файлі
file_lines_gen = file_lines_generator('example.txt')
print(list(file_lines_gen))

========================
Результати

Отримані результати демонструють успішну реалізацію генераторів для різних типів послідовностей та структур даних. Кожен генератор було випробувано на коректність генерації та ефективність роботи з великими обсягами даних.

=========================
Висновки

Мета лабораторної роботи досягнута повністю. Проблеми, які виникали, були успішно вирішені завдяки гнучкому підходу до реалізації генераторів у Python.

=========================
Інструкції з запуску
