Лабораторна робота №8
=============================
Метою даної лабораторної роботи є навчитися працювати з JSON файлами в Python. Очікувані результати включають освоєння методів читання, запису, перевірки та модифікації JSON даних.
=============================
Опис завдання

Необхідно реалізувати декілька функцій для роботи з JSON файлами:

   1. task1(file_path, age_threshold) - Читає JSON файл та повертає список імен осіб, чий вік перевищує заданий поріг.
   2. task2(data, file_path) - Записує передані дані у JSON файл.
   3. task3(schema, file_paths) - Перевіряє JSON файли на відповідність заданій схемі та повертає список файлів з помилками.
   4. task4(file_path, key) - Витягує всі значення для заданого ключа з JSON файлу.
   5. task5(file_path, category, update_function) - Оновлює об'єкти у JSON файлі відповідно до заданої категорії та функції оновлення.
===============================
Виконання роботи

Структура проекту:
Проект організовано у наступній структурі:
main.py

    Основний файл, що містить реалізацію всіх функцій для роботи з JSON файлами.
    Включає наступні функції:
        task1(file_path, age_threshold): Читає JSON файл та повертає список імен осіб, чий вік перевищує заданий поріг.
        task2(data, file_path): Записує передані дані у JSON файл.
        task3(schema, file_paths): Перевіряє JSON файли на відповідність заданій схемі та повертає список файлів з помилками.
        task4(file_path, key): Витягує всі значення для заданого ключа з JSON файлу.
        task5(file_path, category, update_function): Оновлює об'єкти у JSON файлі відповідно до заданої категорії та функції оновлення.
        increase_price(item): Збільшує ціну товару на 10 одиниць (приклад функції для task5).

README.md

    Файл з детальним поясненням проекту.
    Містить наступні розділи:
        Назва роботи
        Мета роботи
        Опис завдання
        Виконання роботи
        Опис структури проекту
        Опис основних функцій та методів
        Приклади використання
        Результати
        Висновки

Опис основних функцій та методів з поясненням їх роботи:
task1(file_path, age_threshold)

    Опис: Читає JSON файл та повертає список імен осіб, чий вік перевищує заданий поріг.
    Параметри:
        file_path: Шлях до JSON файлу.
        age_threshold: Віковий поріг.
    Повертає: Список імен.

task2(data, file_path)

    Опис: Записує передані дані у JSON файл.
    Параметри:
        data: Дані для запису.
        file_path: Шлях до JSON файлу.
    Повертає: Нічого.

task3(schema, file_paths)

    Опис: Перевіряє JSON файли на відповідність заданій схемі та повертає список файлів з помилками.
    Параметри:
        schema: Схема для перевірки.
        file_paths: Список шляхів до JSON файлів.
    Повертає: Список файлів з помилками.

task4(file_path, key)

    Опис: Витягує всі значення для заданого ключа з JSON файлу.
    Параметри:
        file_path: Шлях до JSON файлу.
        key: Ключ для пошуку.
    Повертає: Список значень для заданого ключа.

task5(file_path, category, update_function)

    Опис: Оновлює об'єкти у JSON файлі відповідно до заданої категорії та функції оновлення.
    Параметри:
        file_path: Шлях до JSON файлу.
        category: Категорія для оновлення.
        update_function: Функція для оновлення об'єктів.
    Повертає: Нічого.

Приклади використання:
task1('data.json', 30): Повертає список імен осіб, чий вік перевищує 30 років.
task2([{'name': 'Alice', 'age': 25}], 'output.json'): Записує дані у файл output.json.
task3(schema, ['file1.json', 'file2.json']): Повертає список файлів з помилками JSON формату.
task4('data.json', 'name'): Витягує всі значення для ключа 'name' з файлу data.json.
task5('data.json', 'electronics', increase_price): Збільшує ціну всіх товарів у категорії 'electronics' на 10.

=============================
Результати
Ось структурований опис кожного прикладу використання функцій:

---

### Приклад 1: `task1(file_path, age_threshold)`

**JSON:**

**Вхідні дані (`data.json`):**
```json
[
    {"name": "John", "age": 35},
    {"name": "Jane", "age": 28},
    {"name": "Bob", "age": 40}
]
```

**Опис:**
Ця функція приймає шлях до JSON файлу `data.json` та пороговий вік `age_threshold`. Вона повертає список імен з об'єктів, де вік перевищує заданий поріг.

**Приклад використання:**
```python
result = task1('data.json', 30)
print(result)
```

**Очікуваний вивід:**
```
['John', 'Bob']
```

---

### Приклад 2: `task2(data, file_path)`

**JSON:**

**Вхідні дані:**
```python
data_to_save = [
    {"name": "Alice", "age": 25},
    {"name": "Bob", "age": 30}
]
```

**Опис:**
Ця функція приймає дані у форматі списку об'єктів `data_to_save` та шлях `file_path` до файлу, у який потрібно зберегти ці дані у форматі JSON.

**Приклад використання:**
```python
task2(data_to_save, 'output.json')
```

**Очікуваний вивід (файл `output.json`):**
```json
[
    {"name": "Alice", "age": 25},
    {"name": "Bob", "age": 30}
]
```

---

### Приклад 3: `task3(schema, file_paths)`

**JSON:**

**Схема:**
```python
schema = {"name": "str", "age": "int"}
```

**Вхідні файли:**
- `file1.json`:
    ```json
    [
        {"name": "Alice", "age": 25},
        {"name": "Bob", "age": 30}
    ]
    ```
- `file2.json`:
    ```json
    [
        {"name": "Alice", "age": "twenty-five"},
        {"name": "Bob", "age": 30}
    ]
    ```

**Опис:**
Ця функція перевіряє кожен файл зі списку `file_paths` на відповідність заданій схемі `schema`. Повертає список назв файлів, у яких є невідповідності.

**Приклад використання:**
```python
file_paths = ['file1.json', 'file2.json']
invalid_files = task3(schema, file_paths)
print(invalid_files)
```

**Очікуваний вивід:**
```
['file2.json']
```

---

### Приклад 4: `task4(file_path, key)`

**JSON:**

**Вхідні дані (`data.json`):**
```json
[
    {"name": "Alice", "age": 25},
    {"name": "Bob", "age": 30},
    {"name": "Charlie", "age": 35}
]
```

**Опис:**
Ця функція приймає шлях до JSON файлу `data.json` та ключ `key`. Вона знаходить всі значення, які відповідають заданому ключу у всіх об'єктах списку.

**Приклад використання:**
```python
values = task4('data.json', 'name')
print(values)
```

**Очікуваний вивід:**
```
['Alice', 'Bob', 'Charlie']
```

---

### Приклад 5: `task5(file_path, category, update_function)`

**JSON:**

**Вхідні дані (`products.json`):**
```json
[
    {"name": "TV", "category": "electronics", "price": 300},
    {"name": "Laptop", "category": "electronics", "price": 800},
    {"name": "Book", "category": "books", "price": 20}
]
```

**Опис:**
Ця функція приймає шлях до JSON файлу `products.json`, категорію `category` та функцію оновлення `update_function`. Вона знаходить усі елементи з вказаною категорією та застосовує до них функцію оновлення.

**Приклад використання:**
```python
def increase_price(item):
    item['price'] += 10

task5('products.json', 'electronics', increase_price)
```

**Очікуваний вивід (оновлений файл `products.json`):**
'''json
[
    {"name": "TV", "category": "electronics", "price": 310},
    {"name": "Laptop", "category": "electronics", "price": 810},
    {"name": "Book", "category": "books", "price": 20}
]
```
==================================
Висновки

У ході виконання лабораторної роботи було успішно реалізовано роботу з обробкою JSON даних за допомогою різних функцій у Python. Основна мета роботи - створення і використання функцій для зчитування, запису, перевірки схеми, пошуку значень та оновлення даних у JSON файлах - була досягнута.

Проте виникли деякі проблеми під час розробки, такі як:

    Обробка винятків: Під час завантаження та обробки JSON даних виникали помилки JSONDecodeError, коли файли мали неправильний формат.
    Пошук значень: Необхідність ефективного пошуку значень за ключем у вкладених структурах даних JSON.

Ці проблеми було вирішено наступним чином:

    Додано обробку винятків для JSONDecodeError у функції task3, щоб програма коректно виявляла та ігнорувала файли з невірним форматом.
    Розроблено рекурсивну функцію extract_values для ефективного пошуку значень у вкладених структурах даних JSON у функції task4.
Таким чином, завдяки вирішенню цих проблем було забезпечено працездатність та ефективність розроблених функцій у відповідності до вимог лабораторної роботи.

==================================
Інструкції з запуску

