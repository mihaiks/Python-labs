Лабораторна робота №16: Advanced TODO List

========================
Мета роботи

Метою цієї лабораторної роботи є створення програми для управління завданнями з можливістю додавання, оновлення, видалення та перегляду завдань. Очікується реалізація класів Task та Schedule, які будуть здатні зберігати інформацію про завдання та їхню історію змін.

========================
Опис завдання

Створити два класи: Task для представлення окремого завдання з основними атрибутами (назва, опис, дата завершення тощо) та методами для управління ним, і Schedule для зберігання списку завдань, виконання операцій над ними (додавання, видалення, оновлення статусів, пошук тощо).


========================
Виконання роботи

Структура проекту: 
Кожна лабораторна робота завантажена у відповідну папку на GitHub. Назва папки відповідає номеру лабораторної роботи (наприклад, labX).

Опис кожного файлу та його призначення:
main.py: Основний код програми з реалізацією усіх функцій.
README.md: Файл з детальним поясненням проекту та виконані завдання.

Опис основних функцій та методів з поясненням їх роботи
Клас Task:

    __init__: Ініціалізація об'єкта завдання з основними атрибутами.
    is_due_today: Перевіряє, чи завдання має бути виконане сьогодні.
    to_dict: Повертає об'єкт завдання у вигляді словника для збереження у файлі.
    from_dict: Статичний метод для створення об'єкту Task зі словника.
    __repr__: Представлення об'єкта завдання у вигляді рядка.

Клас Schedule:

    __init__: Ініціалізація об'єкта розкладу з пустим списком завдань і історією змін.
    add_task: Додає нове завдання до списку історії.
    remove_task: Видаляє завдання за назвою зі списку.
    get_task: Повертає завдання за назвою.
    list_overdue_tasks: Повертає список прострочених завдань.
    list_tasks_due_today: Повертає список завдань, які мають бути виконані сьогодні.
    sort_tasks_by_due_date: Сортує завдання за датою завершення.
    update_task: Оновлює атрибути завдання за назвою.
    mark_as_completed: Помічає завдання як виконане і додає цю зміну до історії.
    list_completed_tasks: Повертає список завдань, які були виконані.
    find_task_by_keyword: Знаходить завдання за ключовим словом у назві або описі.
    check_deadlines: Повертає список завдань, чия дата завершення є завтрашньою.
    list_all_tasks: Повертає усі завдання.
    list_tasks_by_duration: Повертає завдання з мінімальною і максимальною тривалістю.
    task_history: Повертає історію змін в розкладі.
    clear_completed_tasks: Видаляє завдання, які були виконані зі списку.
    list_recurring_tasks: Повертає список повторюваних завдань.
    set_reminder: Встановлює нагадування для завдання.
    completion_percentage: Повертає відсоток завершених завдань від усіх завдань.
    save_to_file: Зберігає дані про завдання у файл JSON.
    load_from_file: Завантажує дані про завдання з файлу JSON.

Приклади використання:

if __name__ == "__main__":
    task1 = Task(title="Buy groceries", description="Milk, Bread, Eggs", due_date=date.today() - timedelta(days=1))
    task2 = Task(title="Submit assignment", description="Math assignment", due_date=date.today() + timedelta(days=2))
    schedule = Schedule()

    schedule.add_task(task1)
    schedule.add_task(task2)

    print(schedule.list_overdue_tasks())  # Виведе список прострочених завдань
    print(schedule.list_tasks_due_today())  # Виведе пустий список, бо завдань на сьогодні немає

    schedule.update_task("Buy groceries", description="Milk, Bread, Eggs, Cheese", due_date=date(2024, 5, 26))
    schedule.mark_as_completed("Buy groceries")

    print(schedule.list_completed_tasks())  # Виведе список виконаних завдань

    print(schedule.find_task_by_keyword("assignment"))  # Виведе завдання з ключовим словом "assignment"

    schedule.save_to_file("schedule.txt")
    schedule.load_from_file("schedule.txt")

    print(schedule.list_all_tasks())  # Виведе усі завдання, зчитані з файлу

==================================
Результати

Результати роботи включають створення функціональної програми для управління завданнями з інтерфейсом користувача, яка здатна зберігати дані, зчитувати та записувати їх у файли, виконувати операції над завданнями та відображати їх статуси.

==================================
Висновки

Було досягнуто мету лабораторної роботи з розробки програми для управління завданнями. Виникли проблеми з реалізацією деяких аспектів класів, які були вирішені за допомогою додаткових досліджень та експериментів.

==================================
Інструкції з запуску
